// Synth jaw v2 by Zilog/PyneRed

// Released with under the CC0 1.0 Universal license and is public domain. For more information on licensing visit: https://creativecommons.org/publicdomain/zero/1.0/

// You can modify the variables below to your requirements. Defaults have been provided. Be sure that they match up with your synth head if you are using that code to generate the head. If you create modifications, I would encourage you to share those modifications with others to allow others to create their own remix!

include <BOSL2/std.scad>;
include <BOSL2/rounding.scad>

// Jaw
render_head = false; // Set to render the head too so that you can get an idea of fit, set to false to render just the jaw for use in production
jaw_front_width_amount = 10; // This is the amount of difference in the head and the jaw
jaw_rear_width_amount = 10; // See above
jaw_front_height = 100;
jaw_rear_height = 300;
// You will get an error: "Requested roundings and/or chamfers exceed the rect height." if these are too high.
jaw_front_rounding = 30;
jaw_rear_rounding = 40;
rear_cut = 320; // This is to remove excess amount of jaw from the rear, set this so it is within the helmet
bottom_cut_front_width = 120; // This is the bottom cut for the head
bottom_cut_location = 310;
bottom_cut_rear_width = 187;
bottom_cut_length = 200;
top_cut_adjustment = 110; // This is to remove excess amount of jaw from the top, set this to a reasonable height
jaw_z_shift = -20; // This moves the entire jaw assembly down
jaw_height = 110;
jaw_width = 70;
jaw_rounding = 20;
chin_depth = 50;
chin_scale = 0.5;
chin_front_bite = 45; // The amount of width to give the jaw "bite"
chin_front_scale = 0.15; // Squish the cut so it looks more realistic
chin_side_bite = 90;
chin_side_bite_scale = 0.03;
jaw_holder_length_extra = 5; // This is the amount of "extra material" to add to the jaw holder length to compensate for any bending
jaw_holder_width_extra = -1; // This is the amount of width taken away to ensure the jaw_folder fits into the hole
side_strap_holders_width = 34;
side_strap_holders_location = 250;
side_strap_holders_height = -52;
side_strap_holders_cut_size = 166; // Change this value so that the cut for the side straps are within the walls but not poking through the entire walls of the model
side_strap_holders_scale = 0.4; // this enables the strap mounts to be thinner
side_strap_rotation = 6;

// Copy the below from your synth head file
// General -- copy these from your synth head!
smooth_edges = false; // Setting this to true will smooth edges and is INCREDIBLY slow (hours!).
smooth_edges_sphere_thickness = 30; // The amount of smoothing to apply. The more smoothing, the exponentially greater resources needed
smoothness = 400; // Setting this to 400 makes the model completely smooth but is heavy on resources. Set to lower until you have completed your changes.
front_width = 115;
front_height = 100;
rear_width = 255;
rear_height = 220;
overall_length = 500;
wall_thickness = 5;
bottom_cut_adjustment = 16; // Change this if the bottom of the head is not cut correctly
// You will get an error: "Requested roundings and/or chamfers exceed the rect height." if these are too high.
front_rounding = 50;
rear_rounding = 120;

// Horns -- copy these from your synth head!
top_horn_length = 180;
top_front_horn_gap = 130;
top_rear_horn_gap = 160;
mid_horn_top_length = 120;
mid_horn_bottom_length = 170;
mid_horn_start = -20;
mid_horn_thickness = 70;
mid_horn_cut_rotation = -2;
bottom_horn_top_length = 170;
bottom_horn_bottom_length = 160;
bottom_horn_cut_height = 130;
bottom_horn_cut_rotation = 0;

// Visor -- copy these from your synth head!
visor_start = 0; // Distance from the "end" of the snoot for visor to start
first_visor_depth = 20; // How deep the visor should "cut" into the base
first_visor_length = 90; // Overall length of visor
breakpoint = 40; // This is how far away you want the breakpoint in the visor
second_visor_depth = 10;
second_visor_length = 230;


// Snoot -- copy these from your synth head!
snoot_width = 70;
snoot_height = 110;
snoot_shift = -20;
snoot_depth = 70;
snoot_scale = 0.76;
snoot_front_rounding = 45;

// Bite -- copy these from your synth head!
front_bite_height = -70;
front_bite_scale = 1.6;
front_bite_radius = 40;
first_bite_height = -96;
first_bite_location = 20;
first_bite_scale = 1.5;
first_bite_radius = 60;
second_bite_height = -130;
second_bite_location = 150;
second_bite_scale = 1.6;
second_bite_radius = 90;
third_bite_height = -150;
third_bite_location = 340;
third_bite_scale = 1.7;
third_bite_radius = 90;

// Hardware -- copy these from your synth head!
jaw_holder_length = 194; // Change this value so that the jaw holders are flush with the head, without poking a hole in the model
jaw_holder_height = -40;
jaw_holder_location = 300;
jaw_holder_circ = 10;
jaw_holder_wall_thickness = 2;
jaw_holder_wall_height = 12;


// Main build
module mainBody() {
    difference() {
        rect_tube(size1=[front_height, front_width], size2=[rear_height, rear_width], wall=wall_thickness, h=overall_length, rounding1=[0, front_rounding, front_rounding, 0], rounding2=[0, rear_rounding, rear_rounding, 0], orient=RIGHT, $fn=smoothness);

        // Main body cuts
        union () {
            // Visor first cut
            translate([visor_start, 0, -first_visor_depth]) {
                translate([first_visor_length/2, 0, 0]) {
                    yrot(-30) cuboid(size=[first_visor_length/2, 200, 100], anchor=LEFT+BOTTOM);
                }
                cuboid(size=[first_visor_length/2, 200, 100], anchor=LEFT+BOTTOM);
            }
            
            // visor last cut
            translate([visor_start+first_visor_length+breakpoint, 0, -second_visor_depth]) {
                yrot(-30) cuboid(size=[second_visor_length/2, 200, 100], anchor=LEFT+BOTTOM);
                cuboid(size=[second_visor_length/2, 300, 200], anchor=LEFT+BOTTOM);
            }
            
            // Top horn cut
            translate([overall_length-top_horn_length, 0, 0]) {
                prismoid(size1 = [rear_width/2, top_rear_horn_gap], size2=[rear_width/2, top_front_horn_gap], orient=LEFT, h = top_horn_length, anchor=TOP+LEFT);
            }
            
            // Mid horn cut
            translate([overall_length-(mid_horn_cut_rotation*2), 0, mid_horn_start]) {
                yrot(mid_horn_cut_rotation) prismoid(size1 = [mid_horn_bottom_length, rear_width], size2 = [mid_horn_top_length, rear_width], shift = [(mid_horn_bottom_length-mid_horn_top_length)/2, 0], h = mid_horn_thickness, anchor=BOTTOM+RIGHT);
            }
            
            // Bottom horn cut
            translate([overall_length-(bottom_horn_cut_rotation*2), 0, -rear_height/2]) {
                yrot(bottom_horn_cut_rotation) prismoid(size1 = [bottom_horn_bottom_length, rear_width], size2 = [bottom_horn_top_length-bottom_horn_cut_rotation, rear_width], shift = [(bottom_horn_bottom_length-bottom_horn_top_length)/2, 0], h = bottom_horn_cut_height, anchor=BOTTOM+RIGHT);
            }
        }
    }
    
    // Snoot
    difference() {
        intersection() {
            prismoid(size1 = [front_height, front_width], size2 = [snoot_height, snoot_width], shift=[snoot_shift, 0], h = snoot_depth, rounding1 = [front_rounding, 0, 0, front_rounding], rounding2 = [snoot_width/2, 0, 0, snoot_width/2], orient = LEFT, $fn = smoothness);
            
            scale([snoot_scale, 1, 1]) {
                cyl(l=front_height, d=front_width, rounding1=0, rounding2=snoot_front_rounding, $fn = smoothness);
            }
        }
        translate([wall_thickness, 0, -wall_thickness]) {
            intersection() {
                prismoid(size1 = [front_height, front_width-wall_thickness], size2 = [snoot_height, snoot_width-wall_thickness], shift=[snoot_shift, 0], h = snoot_depth, rounding1 = [front_rounding-wall_thickness, 0, 0, front_rounding-wall_thickness], rounding2 = [(snoot_width/2)-wall_thickness, 0, 0, (snoot_width/2)-wall_thickness], orient = LEFT, $fn = smoothness);
        
                scale([snoot_scale, 1, 1]) {
                    cyl(l=front_height, d=front_width, rounding1=0, rounding2=snoot_front_rounding, $fn = smoothness);
                }
            }
        }
    }
}

// Create the unsmoothed body - this can later be smoothed with smooth_edges turned on.
module unsmoothed() {
    difference() {
        mainBody();
        
        // Bottom cut... this is a large prismoid with some extra added on to cut the snoot appropriately
        translate([-overall_length*0.1, 0, -rear_width/2-wall_thickness-bottom_cut_adjustment]) {
            prismoid(size1=[front_height, rear_width], size2=[rear_height, rear_width], h=overall_length, orient=LEFT, anchor=TOP);
        }
        
        // Front bite cut
        translate([0, 0, front_bite_height]) {
            scale([1, front_bite_scale, 1]) {
                cyl(l = snoot_depth, orient=RIGHT, r=front_bite_radius, anchor=TOP, $fn = smoothness);
            }
        }
        
        // First bite cut
        translate([first_bite_location, 0, first_bite_height]) {
            scale([first_bite_scale, 1, 1]) {
                cyl(l = rear_width, orient=FRONT, r=first_bite_radius, $fn = smoothness);
            }
        }
        
        // Second bite cut
        translate([second_bite_location, 0, second_bite_height]) {
            scale([second_bite_scale, 1, 1]) {
                cyl(l = rear_width, orient=FRONT, r=second_bite_radius, $fn = smoothness);
            }
        }
        
        // Third bite cut
        translate([third_bite_location, 0, third_bite_height]) {
            scale([third_bite_scale, 1, 1]) {
                cyl(l = rear_width, orient=FRONT, r=third_bite_radius, $fn = smoothness);
            }
        }
    }
}

if (render_head == true) {
    // Add the hardware cuts (which are unsmoothed (smooth_edges)) to the model
    difference() {
        union () {
            if (smooth_edges == false) {
                unsmoothed();
            } else {
                minkowski() {
                    sphere_thickness = (wall_thickness/2)-2;
                    wall_thickness = 1;
                    unsmoothed();
                    sphere(sphere_thickness, $fn = smooth_edges_sphere_thickness);
                }
            }
            
            // Jaw holder wall
            translate([jaw_holder_location, 0, jaw_holder_height]) {
                cyl(l = jaw_holder_length, orient=FRONT, r=jaw_holder_circ+jaw_holder_wall_thickness, $fn = smoothness);
            }
        }
        union () {
            // jaw holder
            translate([jaw_holder_location, 0, jaw_holder_height]) {
                cyl(l = jaw_holder_length, orient=FRONT, r=jaw_holder_circ, $fn = smoothness);
            }
            // Jaw holder wall trim
            translate([jaw_holder_location, 0, jaw_holder_height]) {
                cyl(l = jaw_holder_length-jaw_holder_wall_height, orient=FRONT, r=jaw_holder_circ+jaw_holder_wall_thickness+1, $fn = smoothness);
            }
        }
    }
}


// Below begins the actual jaw model
color("red") {
    translate([0, 0, jaw_z_shift]) {
        difference() {
            // Main jaw
            rect_tube(size1=[jaw_front_height, front_width-wall_thickness-jaw_front_width_amount], size2=[jaw_rear_height, rear_width-wall_thickness-jaw_rear_width_amount], wall=wall_thickness, h=overall_length, rounding1=[jaw_front_rounding, 0, 0, jaw_front_rounding], rounding2=[jaw_rear_rounding, 0, 0, jaw_rear_rounding], orient=RIGHT, $fn=smoothness);
            
            union() {
                // rear cut
                translate([rear_cut, 0, 0]) {
                    prismoid(size1=[jaw_rear_height, rear_width], size2=[jaw_rear_height, rear_width], h=overall_length, orient=RIGHT);
                }
                // top cut
                translate([0, 0, top_cut_adjustment]) {
                    prismoid(size1=[rear_height, rear_width], size2=[rear_height, rear_width], h=overall_length, orient=RIGHT);
                }
                
                // Side bite cute
                scale([1, 1, chin_side_bite_scale]) {
                    cyl(l = rear_width, orient=FRONT, r=chin_side_bite, $fn = smoothness);
                }
                
                // Side strap cuts
                translate([side_strap_holders_location, 0, side_strap_holders_height]) {
                    scale([side_strap_holders_scale, 1, 1]) {
                        rotate([0, side_strap_rotation, 0]) {
                            tube(h=side_strap_holders_width, or=side_strap_holders_cut_size/2, wall=2, $fn = smoothness);
                        }
                    }
                }
                
                // Bottom cut / head entrance
                translate([bottom_cut_location+30, 0, 0]) {
                    diff() prismoid(size1 = [rear_width, bottom_cut_rear_width], size2=[rear_width, bottom_cut_front_width], orient=LEFT, h = bottom_cut_length) {
                        edge_profile([TOP+FRONT, TOP+BACK], excess=40, convexity=80) {
                            mask2d_roundover(h=bottom_cut_front_width/2,mask_angle=$edge_angle);
                        }
                    }
                }
            }
        }
        
        // chin
        difference() {
            intersection() {
                prismoid(size1 = [front_height, front_width-wall_thickness-jaw_front_width_amount], size2 = [jaw_height, jaw_width], shift=[-snoot_shift, 0], h = chin_depth, rounding1 = [0, jaw_front_rounding, jaw_front_rounding, 0], rounding2 = [0, jaw_width/2, jaw_width/2, 0], orient = LEFT, $fn = smoothness);
                

                scale([chin_scale, 1, 1]) {
                    cyl(l=jaw_height, d=front_width, rounding1=snoot_front_rounding, rounding2=snoot_front_rounding, $fn = smoothness);
                }
            }
            // chin cut
            union () {
                translate([wall_thickness, 0, wall_thickness]) {
                    intersection() {
                        prismoid(size1 = [front_height, front_width-wall_thickness-wall_thickness-jaw_front_width_amount], size2 = [jaw_height, jaw_width-wall_thickness], shift=[-snoot_shift, 0], h = chin_depth, rounding1 = [0, jaw_front_rounding-wall_thickness, jaw_front_rounding-wall_thickness, 0], rounding2 = [0, (jaw_width/2)-wall_thickness, (jaw_width/2)-wall_thickness, 0], orient = LEFT, $fn = smoothness);
                
                        scale([chin_scale, 1, 1]) {
                            cyl(l=jaw_height, d=front_width-wall_thickness, rounding1=0, rounding2=jaw_rounding, $fn = smoothness);
                        }
                    }
                }
                translate([0, 0, top_cut_adjustment]) {
                    prismoid(size1=[rear_height, rear_width], size2=[rear_height, rear_width], h=overall_length, orient=LEFT);
                }
                
                // Front bite cut
                scale([1, 1, chin_front_scale]) {
                    cyl(l = snoot_depth, orient=RIGHT, r=chin_front_bite, $fn = smoothness);
                }
                
                // side bite cut
                scale([1, 1, chin_side_bite_scale]) {
                    cyl(l = rear_width, orient=FRONT, r=chin_side_bite, $fn = smoothness);
                }
            }
        }
    }
    // jaw holder
    difference() {
        // Jaw holder
        translate([jaw_holder_location, 0, jaw_holder_height]) {
            cyl(l = jaw_holder_length+jaw_holder_length_extra, orient=FRONT, r=jaw_holder_circ+jaw_holder_width_extra, $fn = smoothness);
        }

        union () {
            // jaw holder
            translate([jaw_holder_location, 0, jaw_holder_height]) {
                cyl(l = jaw_holder_length-(wall_thickness*3), orient=FRONT, r=jaw_holder_circ+jaw_holder_width_extra+1, $fn = smoothness);
            }
        }
    }




}
